File_work.h
#pragma once
#include "Pair.h"
#include <iostream>
using namespace std;

char f_name[30];
int value;

void check_k(int k)
{
	if (k < 0)
	{
		cout << "Невозможно прочесть файл!" << endl;
	}
}

int make_file()
{
	cout << "Введите название файла: ";
	cin >> f_name;
	fstream stream(f_name, ios::out | ios::trunc);
	if (!stream)
	{
		return -1;
	}
	int n;
	Pair m_Pair;
	cout << "Введите количество элементов: ";
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> m_Pair;
		stream << m_Pair << endl;
	}
	stream.close();
	return n;
}

int print_file()
{
	cout << "Введите название файла: ";
	cin >> f_name;
	fstream stream(f_name, ios::in);
	if (!stream)
	{
		return -1;
	}
	Pair m_Pair;
	int i = 0;
	while (stream >> m_Pair)
	{
		cout << m_Pair << endl;
		i++;
	}
	if (i == 0)
	{
		cout << "Файл пустой.";
	}
	stream.close();
	return i;
}

int del_file()
{
	cout << "Введите название файла: ";
	cin >> f_name;
	cout << "Введите значение: ";
	cin >> value;
	fstream temp("temp", ios::out);
	fstream stream(f_name, ios::in);
	if (!stream)
	{
		return -1;
	}
	int i = 0;
	Pair m_Pair;
	while (stream >> m_Pair)
	{
		if (stream.eof())
		{
			break;
		}
		i++;
		if (m_Pair >= value)
		{
			temp << m_Pair;
		}
	}
	stream.close();
	temp.close();
	remove(f_name);
	rename("temp", f_name);
	return i;
}

int add_file()
{
	int number;
	cout << "Введите название файла: ";
	cin >> f_name;
	cout << "Введите номер: ";
	cin >> number;
	cout << "Введите количество записей: ";
	cin >> value;
	fstream temp("temp", ios::out);
	fstream stream(f_name, ios::in);
	int i = 1;
	if (!stream)
	{
		return -1;
	}
	Pair pair;
	while (i != number && stream >> pair)
	{
		if (stream.eof())
		{
			break;
		}
		i++;
		temp << pair;
	}
	if (i == number)
	{
		for (int j = 0; j < value; j++)
		{
			Pair m_Pair;
			cin >> m_Pair;
			temp << m_Pair;
		}
	}
	while (stream >> pair)
	{
		if (stream.eof())
		{
			break;
		}
		temp << pair;
	}
	temp.close();
	stream.close();
	remove(f_name);
	rename("temp", f_name);
	return value;
}

int change_file()
{
	cout << "Введите название файла: ";
	cin >> f_name;
	cout << "Введите значение: ";
	cin >> value;
	fstream temp("temp", ios::out);
	fstream stream(f_name, ios::in);
	if (!stream)
	{
		return -1;
	}
	Pair pair;
	int i = 0;
	while (stream >> pair)
	{
		temp << pair + value;
	}
	temp.close();
	stream.close();
	remove(f_name);
	rename("temp", f_name);
	return i;
}
Pair.h
#pragma once
#include <iostream>
#include <fstream>
using namespace std;

class Pair
{
	int first;
	double second;
public:
	friend istream& operator>>(istream& in, Pair& p);
	friend ostream& operator<<(ostream& out, const Pair& p);
	Pair(int, double);
	Pair();
	Pair(const Pair&);
	~Pair();
	Pair& operator=(const Pair&);
	Pair operator-(const Pair&);
	Pair& operator+(int);
	Pair& operator+(double);
	Pair& operator++();
	Pair operator++(int);
	friend fstream& operator>>(fstream& fin, Pair& m_Pair);
	friend fstream& operator<<(fstream& fout, const Pair& m_Pair);
	bool operator>=(int value);
	void SetFirst(int m_first);
	void SetSecond(double m_second);
	int GetFirst()const;
	double GetSecond()const;
};
Pair.cpp
#include "Pair.h"

Pair::Pair(int first, double second)
{
	this->first = first;
	this->second = second;
}

istream& operator>>(istream& in, Pair& m_pair)
{
	cout << "Введите данные(целое и вещественное число): " << endl;
	in >> m_pair.first;
	in >> m_pair.second;
	return in;
}

ostream& operator<<(ostream& out, const Pair& m_pair)
{
	return(out << m_pair.first << ":" << m_pair.second);
}

fstream& operator>>(fstream& fin, Pair& m_Pair)
{
	fin >> m_Pair.first;
	fin >> m_Pair.second;
	return fin;
}

fstream& operator<<(fstream& fout, const Pair& m_Pair)
{
	fout << m_Pair.first << ' ' << m_Pair.second << endl;
	return fout;
}

Pair::Pair()
{
	first = 0;
	second = 0;
}

Pair::~Pair()
{
}

Pair::Pair(const Pair& m_pair)
{
	first = m_pair.first;
	second = m_pair.second;
}

Pair& Pair::operator=(const Pair& m_pair)
{
	if (&m_pair != this)
	{
		first = m_pair.first;
		second = m_pair.second;
	}
	return *this;
}

Pair Pair::operator-(const Pair& m_pair)
{
	Pair result(first - m_pair.first, second - m_pair.second);
	return result;
}

Pair& Pair::operator+(int first)
{
	this->first += first;
	return *this;
}

Pair& Pair::operator++()
{
	++first;
	++second;
	return *this;
}

Pair Pair::operator++(int)
{
	Pair temp = *this;
	this->first++;
	this->second++;
	return temp;
}

bool Pair::operator>=(int value)
{
	return(this->first >= value && this->second >= value);
}

int Pair::GetFirst() const
{
	return first;
}

double Pair::GetSecond() const
{
	return second;
}

void Pair::SetFirst(int m_first)
{
	first = m_first;
}

void Pair::SetSecond(double m_second)
{
	second = m_second;
}
Main.cpp
#include <iostream>
#include "File_work.h"
#include <string>
#include <functional>
using namespace std;

int main()
{
	setlocale(LC_ALL, "RU");
	system("chcp 1251>NULL");
	int choose = 6;
	function<int()>f[5] = { make_file,print_file,del_file,change_file,add_file };
	do
	{
		if (choose != 6)
		{
			check_k(f[choose - 1]());
		}
		cout << "Введите номер команды:\n1.Создать файл\n2.Печать файла\n3Удалить все записи меньше заданного значения.\n4.Увеличить все записи с заданным значением на число А\n5.Добавить К записей перед элементом с заданным номером\n6.Выход\n";
		cin >> choose;
		system("cls");
	} while (choose != 6);
	return 0;
}
